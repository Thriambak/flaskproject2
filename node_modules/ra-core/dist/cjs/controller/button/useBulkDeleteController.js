"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBulkDeleteController = void 0;
var react_1 = require("react");
var useDeleteMany_1 = require("../../dataProvider/useDeleteMany");
var useRefresh_1 = require("../../dataProvider/useRefresh");
var useListContext_1 = require("../list/useListContext");
var useNotify_1 = require("../../notification/useNotify");
var useResourceContext_1 = require("../../core/useResourceContext");
var useTranslate_1 = require("../../i18n/useTranslate");
var useBulkDeleteController = function (props) {
    var _a = props.mutationMode, mutationMode = _a === void 0 ? 'undoable' : _a, _b = props.mutationOptions, mutationOptions = _b === void 0 ? {} : _b, successMessage = props.successMessage;
    var mutationMeta = mutationOptions.meta, otherMutationOptions = __rest(mutationOptions, ["meta"]);
    var resource = (0, useResourceContext_1.useResourceContext)(props);
    var notify = (0, useNotify_1.useNotify)();
    var refresh = (0, useRefresh_1.useRefresh)();
    var translate = (0, useTranslate_1.useTranslate)();
    var _c = (0, useListContext_1.useListContext)(), selectedIds = _c.selectedIds, onUnselectItems = _c.onUnselectItems;
    var _d = (0, useDeleteMany_1.useDeleteMany)(resource, undefined, {
        onSuccess: function () {
            notify(successMessage !== null && successMessage !== void 0 ? successMessage : "resources.".concat(resource, ".notifications.deleted"), {
                type: 'info',
                messageArgs: {
                    smart_count: selectedIds.length,
                    _: translate('ra.notification.deleted', {
                        smart_count: selectedIds.length,
                    }),
                },
                undoable: mutationMode === 'undoable',
            });
            onUnselectItems();
        },
        onError: function (error) {
            notify(typeof error === 'string'
                ? error
                : (error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {
                type: 'error',
                messageArgs: {
                    _: typeof error === 'string'
                        ? error
                        : error === null || error === void 0 ? void 0 : error.message,
                },
            });
            refresh();
        },
    }), deleteMany = _d[0], isPending = _d[1].isPending;
    var handleDelete = (0, react_1.useCallback)(function () {
        deleteMany(resource, {
            ids: selectedIds,
            meta: mutationMeta,
        }, __assign({ mutationMode: mutationMode }, otherMutationOptions));
    }, [
        deleteMany,
        mutationMeta,
        mutationMode,
        otherMutationOptions,
        resource,
        selectedIds,
    ]);
    return (0, react_1.useMemo)(function () { return ({
        isPending: isPending,
        isLoading: isPending,
        handleDelete: handleDelete,
    }); }, [isPending, handleDelete]);
};
exports.useBulkDeleteController = useBulkDeleteController;
//# sourceMappingURL=useBulkDeleteController.js.map