"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkDeleteWithConfirmButton = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
var styles_1 = require("@mui/material/styles");
var ra_core_1 = require("ra-core");
var layout_1 = require("../layout");
var Button_1 = require("./Button");
var inflection_1 = require("inflection");
var BulkDeleteWithConfirmButton = function (inProps) {
    var props = (0, styles_1.useThemeProps)({
        props: inProps,
        name: PREFIX,
    });
    var _a = props.confirmTitle, confirmTitle = _a === void 0 ? 'ra.message.bulk_delete_title' : _a, _b = props.confirmContent, confirmContent = _b === void 0 ? 'ra.message.bulk_delete_content' : _b, _c = props.confirmColor, confirmColor = _c === void 0 ? 'primary' : _c, _d = props.icon, icon = _d === void 0 ? defaultIcon : _d, _e = props.label, label = _e === void 0 ? 'ra.action.delete' : _e, _f = props.mutationMode, mutationMode = _f === void 0 ? 'pessimistic' : _f, onClick = props.onClick, rest = __rest(props, ["confirmTitle", "confirmContent", "confirmColor", "icon", "label", "mutationMode", "onClick"]);
    var selectedIds = (0, ra_core_1.useListContext)().selectedIds;
    var _g = (0, ra_core_1.useBulkDeleteController)(__assign(__assign({ mutationMode: mutationMode }, rest), { mutationOptions: __assign(__assign({}, rest.mutationOptions), { onSettled: function () {
                var _a, _b;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // In pessimistic mode, we wait for the mutation to be completed (either successfully or with an error) before closing
                if (mutationMode === 'pessimistic') {
                    setOpen(false);
                }
                (_b = (_a = rest.mutationOptions) === null || _a === void 0 ? void 0 : _a.onSettled) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a], args, false));
            } }) })), handleDelete = _g.handleDelete, isPending = _g.isPending;
    var _h = (0, react_1.useState)(false), isOpen = _h[0], setOpen = _h[1];
    var resource = (0, ra_core_1.useResourceContext)(props);
    var translate = (0, ra_core_1.useTranslate)();
    var handleClick = function (e) {
        e.stopPropagation();
        setOpen(true);
    };
    var handleDialogClose = function (e) {
        e.stopPropagation();
        setOpen(false);
    };
    var handleConfirm = function (e) {
        e.stopPropagation();
        // We close the dialog immediately here for optimistic/undoable modes instead of in onSuccess/onError
        // to avoid reimplementing the default side effects
        if (mutationMode !== 'pessimistic') {
            setOpen(false);
        }
        handleDelete();
        if (typeof onClick === 'function') {
            onClick(e);
        }
    };
    return (React.createElement(react_1.Fragment, null,
        React.createElement(StyledButton, __assign({ onClick: handleClick, label: label, color: "error" }, sanitizeRestProps(rest)), icon),
        React.createElement(layout_1.Confirm, { isOpen: isOpen, loading: isPending, title: confirmTitle, content: confirmContent, confirmColor: confirmColor, titleTranslateOptions: {
                smart_count: selectedIds.length,
                name: translate("resources.".concat(resource, ".forcedCaseName"), {
                    smart_count: selectedIds.length,
                    _: (0, inflection_1.humanize)(translate("resources.".concat(resource, ".name"), {
                        smart_count: selectedIds.length,
                        _: resource
                            ? (0, inflection_1.inflect)(resource, selectedIds.length)
                            : undefined,
                    }), true),
                }),
            }, contentTranslateOptions: {
                smart_count: selectedIds.length,
                name: translate("resources.".concat(resource, ".forcedCaseName"), {
                    smart_count: selectedIds.length,
                    _: (0, inflection_1.humanize)(translate("resources.".concat(resource, ".name"), {
                        smart_count: selectedIds.length,
                        _: resource
                            ? (0, inflection_1.inflect)(resource, selectedIds.length)
                            : undefined,
                    }), true),
                }),
            }, onConfirm: handleConfirm, onClose: handleDialogClose })));
};
exports.BulkDeleteWithConfirmButton = BulkDeleteWithConfirmButton;
var sanitizeRestProps = function (_a) {
    var classes = _a.classes, label = _a.label, resource = _a.resource, successMessage = _a.successMessage, rest = __rest(_a, ["classes", "label", "resource", "successMessage"]);
    return rest;
};
var PREFIX = 'RaBulkDeleteWithConfirmButton';
var StyledButton = (0, styles_1.styled)(Button_1.Button, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () { return ({}); });
var defaultIcon = React.createElement(Delete_1.default, null);
//# sourceMappingURL=BulkDeleteWithConfirmButton.js.map