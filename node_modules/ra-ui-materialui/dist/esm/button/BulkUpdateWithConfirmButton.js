var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { Fragment, useState } from 'react';
import ActionUpdate from '@mui/icons-material/Update';
import { styled, useThemeProps, } from '@mui/material/styles';
import { useListContext, useTranslate, useResourceContext, useBulkUpdateController, } from 'ra-core';
import { Confirm } from '../layout';
import { Button } from './Button';
import { humanize, inflect } from 'inflection';
export var BulkUpdateWithConfirmButton = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var translate = useTranslate();
    var resource = useResourceContext(props);
    var _a = useState(false), isOpen = _a[0], setOpen = _a[1];
    var selectedIds = useListContext().selectedIds;
    var _b = props.confirmTitle, confirmTitle = _b === void 0 ? 'ra.message.bulk_update_title' : _b, _c = props.confirmContent, confirmContent = _c === void 0 ? 'ra.message.bulk_update_content' : _c, data = props.data, _d = props.icon, icon = _d === void 0 ? defaultIcon : _d, _e = props.label, label = _e === void 0 ? 'ra.action.update' : _e, _f = props.mutationMode, mutationMode = _f === void 0 ? 'pessimistic' : _f, onClick = props.onClick, rest = __rest(props, ["confirmTitle", "confirmContent", "data", "icon", "label", "mutationMode", "onClick"]);
    var _g = useBulkUpdateController(__assign(__assign({}, rest), { mutationMode: mutationMode, mutationOptions: __assign(__assign({}, rest.mutationOptions), { onSettled: function () {
                var _a, _b;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // In pessimistic mode, we wait for the mutation to be completed (either successfully or with an error) before closing
                if (mutationMode === 'pessimistic') {
                    setOpen(false);
                }
                (_b = (_a = rest.mutationOptions) === null || _a === void 0 ? void 0 : _a.onSettled) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a], args, false));
            } }) })), handleUpdate = _g.handleUpdate, isPending = _g.isPending;
    var handleClick = function (e) {
        e.stopPropagation();
        setOpen(true);
    };
    var handleDialogClose = function (e) {
        e.stopPropagation();
        setOpen(false);
    };
    var handleConfirm = function (e) {
        e.stopPropagation();
        // We close the dialog immediately here for optimistic/undoable modes instead of in onSuccess/onError
        // to avoid reimplementing the default side effects
        if (mutationMode !== 'pessimistic') {
            setOpen(false);
        }
        handleUpdate(data);
        if (typeof onClick === 'function') {
            onClick(e);
        }
    };
    return (React.createElement(Fragment, null,
        React.createElement(StyledButton, __assign({ onClick: handleClick, label: label }, sanitizeRestProps(rest)), icon),
        React.createElement(Confirm, { isOpen: isOpen, loading: isPending, title: confirmTitle, content: confirmContent, titleTranslateOptions: {
                smart_count: selectedIds.length,
                name: translate("resources.".concat(resource, ".forcedCaseName"), {
                    smart_count: selectedIds.length,
                    _: humanize(translate("resources.".concat(resource, ".name"), {
                        smart_count: selectedIds.length,
                        _: resource
                            ? inflect(resource, selectedIds.length)
                            : undefined,
                    }), true),
                }),
            }, contentTranslateOptions: {
                smart_count: selectedIds.length,
                name: translate("resources.".concat(resource, ".forcedCaseName"), {
                    smart_count: selectedIds.length,
                    _: humanize(translate("resources.".concat(resource, ".name"), {
                        smart_count: selectedIds.length,
                        _: resource
                            ? inflect(resource, selectedIds.length)
                            : undefined,
                    }), true),
                }),
            }, onConfirm: handleConfirm, onClose: handleDialogClose })));
};
var sanitizeRestProps = function (_a) {
    var label = _a.label, resource = _a.resource, successMessage = _a.successMessage, rest = __rest(_a, ["label", "resource", "successMessage"]);
    return rest;
};
var PREFIX = 'RaBulkUpdateWithConfirmButton';
var StyledButton = styled(Button, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () { return ({}); });
var defaultIcon = React.createElement(ActionUpdate, null);
//# sourceMappingURL=BulkUpdateWithConfirmButton.js.map