var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useFieldValue } from 'ra-core';
import * as React from 'react';
import { Chip, Stack } from '@mui/material';
/**
 * Renders an array of scalar values using MUI Stack and Chips.
 *
 * @example
 * // const post = {
 * //   id: 123
 * //   genres: [
 * //     'Fiction',
 * //     'Historical Fiction',
 * //     'Classic Literature',
 * //     'Russian Literature',
 * //   ]
 * // };
 * const PostShow = () => (
 *    <Show>
 *       <SimpleShowLayout>
 *           <TextArrayField source="genres" />
 *      </SimpleShowLayout>
 *   </Show>
 * );
 */
export var TextArrayField = function (props) {
    var emptyText = props.emptyText, source = props.source, record = props.record, resource = props.resource, _a = props.size, size = _a === void 0 ? 'small' : _a, color = props.color, variant = props.variant, rest = __rest(props, ["emptyText", "source", "record", "resource", "size", "color", "variant"]);
    var data = useFieldValue(props) || emptyArray;
    return (React.createElement(Stack, __assign({ direction: "row" }, rest, { sx: __assign({ gap: 1, flexWrap: 'wrap' }, rest.sx) }), data.length === 0
        ? emptyText
        : data.map(function (item, index) { return (React.createElement(Chip, { key: index, label: item, size: size, color: color, variant: variant })); })));
};
var emptyArray = [];
//# sourceMappingURL=TextArrayField.js.map