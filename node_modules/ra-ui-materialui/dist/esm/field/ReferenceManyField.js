var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ReferenceManyFieldBase, useTranslate, } from 'ra-core';
import { Typography } from '@mui/material';
import { Offline } from '../Offline';
/**
 * Render related records to the current one.
 *
 * You must define the fields to be passed to the iterator component as children.
 *
 * @example Display all the comments of the current post as a datagrid
 * <ReferenceManyField reference="comments" target="post_id">
 *     <Datagrid>
 *         <TextField source="id" />
 *         <TextField source="body" />
 *         <DateField source="created_at" />
 *         <EditButton />
 *     </Datagrid>
 * </ReferenceManyField>
 *
 * @example Display all the books by the current author, only the title
 * <ReferenceManyField reference="books" target="author_id">
 *     <SingleFieldList>
 *         <ChipField source="title" />
 *     </SingleFieldList>
 * </ReferenceManyField>
 *
 * By default, restricts the displayed values to 25. You can extend this limit
 * by setting the `perPage` prop.
 *
 * @example
 * <ReferenceManyField perPage={10} reference="comments" target="post_id">
 *    ...
 * </ReferenceManyField>
 *
 * By default, orders the possible values by id desc. You can change this order
 * by setting the `sort` prop (an object with `field` and `order` properties).
 *
 * @example
 * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference="comments" target="post_id">
 *    ...
 * </ReferenceManyField>
 *
 * Also, you can filter the query used to populate the possible values. Use the
 * `filter` prop for that.
 *
 * @example
 * <ReferenceManyField filter={{ is_published: true }} reference="comments" target="post_id">
 *    ...
 * </ReferenceManyField>
 */
export var ReferenceManyField = function (props) {
    var translate = useTranslate();
    var children = props.children, pagination = props.pagination, empty = props.empty, _a = props.offline, offline = _a === void 0 ? defaultOffline : _a, render = props.render, controllerProps = __rest(props, ["children", "pagination", "empty", "offline", "render"]);
    return (React.createElement(ReferenceManyFieldBase, __assign({}, controllerProps, { empty: typeof empty === 'string' ? (React.createElement(Typography, { component: "span", variant: "body2" }, translate(empty, { _: empty }))) : (empty), render: function (props) {
            var isPaused = props.isPaused, isPending = props.isPending, isPlaceholderData = props.isPlaceholderData;
            var shouldRenderOffline = isPaused &&
                (isPending || isPlaceholderData) &&
                offline !== undefined &&
                offline !== false;
            return (React.createElement(React.Fragment, null,
                shouldRenderOffline
                    ? offline
                    : render
                        ? render(props)
                        : children,
                pagination));
        } })));
};
var defaultOffline = React.createElement(Offline, { variant: "inline" });
//# sourceMappingURL=ReferenceManyField.js.map