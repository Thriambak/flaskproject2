var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Alert, styled, Typography, } from '@mui/material';
import { useGetResourceLabel, useResourceContext, useResourceTranslation, } from 'ra-core';
import clsx from 'clsx';
export var Offline = function (props) {
    var _a;
    var icon = props.icon, messageProp = props.message, _b = props.variant, variant = _b === void 0 ? 'standard' : _b, rest = __rest(props, ["icon", "message", "variant"]);
    var resource = useResourceContext(props);
    var getResourceLabel = useGetResourceLabel();
    var message = useResourceTranslation({
        baseI18nKey: 'ra.notification.offline',
        resourceI18nKey: resource
            ? "resources.".concat(resource, ".notification.offline")
            : undefined,
        userText: messageProp,
        options: {
            name: resource ? getResourceLabel(resource, 0) : undefined,
            _: 'No connectivity. Could not fetch data.',
        },
    });
    return (React.createElement(Root, __assign({ className: clsx(OfflineClasses.root, (_a = {},
            _a[OfflineClasses.inline] = variant === 'inline',
            _a)), severity: "warning", variant: variant === 'inline' ? 'outlined' : variant, icon: variant === 'inline' ? false : icon }, rest),
        React.createElement(Typography, { variant: "body2" }, message)));
};
var PREFIX = 'RaOffline';
export var OfflineClasses = {
    root: "".concat(PREFIX, "-root"),
    inline: "".concat(PREFIX, "-inline"),
};
var Root = styled(Alert, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () {
    var _a;
    return (_a = {},
        _a["&.".concat(OfflineClasses.inline)] = {
            border: 'none',
            display: 'inline-flex',
            padding: 0,
            margin: 0,
        },
        _a);
});
//# sourceMappingURL=Offline.js.map